local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local KEYWORDS = { "aura", "forcefield", "suit", "feather", "fur" }

local function strContainsKeywords(s)
    s = tostring(s or ""):lower()
    for _, word in ipairs(KEYWORDS) do
        if s:find(word, 1, true) then -- plain find (kein pattern)
            return true
        end
    end
    return false
end

-- funktioniert mit Instances oder Strings
local function shouldDelete(value)
    -- value kann ein Instance oder ein String sein
    if typeof(value) == "Instance" then
        -- Name check
        if strContainsKeywords(value.Name) then return true end
        -- sichere Abfrage von oft genutzten properties (falls vorhanden)
        local ok, v = pcall(function() return value.MeshId end)
        if ok and strContainsKeywords(v) then return true end
        ok, v = pcall(function() return value.TextureId end)
        if ok and strContainsKeywords(v) then return true end
        ok, v = pcall(function() return value.Texture end)
        if ok and strContainsKeywords(v) then return true end
        -- falls es ein Accessory/Hat ist, prüfe den Handle-Namen (häufig)
        ok, v = pcall(function()
            if value:FindFirstChild("Handle") then return value.Handle.Name end
            return nil
        end)
        if ok and strContainsKeywords(v) then return true end
        return false
    else
        -- value ist kein Instance -> als String behandeln
        return strContainsKeywords(tostring(value))
    end
end

local function nuke(inst)
    if not inst or not inst.Parent then return end
    pcall(function()
        inst:Destroy()
    end)
end

local function handle(inst)
    if not inst then return end
    -- Schutz: pcall innerhalb handle um ungeplante Index-Errors abzufangen
    local ok, err = pcall(function()
        -- Accessory / Hat
        if inst:IsA("Accessory") or inst:IsA("Hat") then
            if shouldDelete(inst) then nuke(inst); return end
        end

        -- BasePart (z.B. Handle)
        if inst:IsA("BasePart") then
            if shouldDelete(inst.Name) or shouldDelete(inst) then nuke(inst); return end
        end

        -- Mesh, MeshPart
        if inst:IsA("SpecialMesh") or inst:IsA("MeshPart") then
            if shouldDelete(inst) or shouldDelete(inst.MeshId) or shouldDelete(inst.TextureId) or shouldDelete(inst.Texture) then
                -- Bei SpecialMesh evtl. parent neutralisieren, sonst Mesh selber
                if inst:IsA("SpecialMesh") and inst.Parent and inst.Parent:IsA("BasePart") then
                    nuke(inst.Parent)
                else
                    nuke(inst)
                end
                return
            end
        end

        -- Decal / Texture
        if inst:IsA("Decal") or inst:IsA("Texture") then
            if shouldDelete(inst) or shouldDelete(inst.Texture) or shouldDelete(inst.Name) then
                nuke(inst)
                return
            end
        end

        -- Effekte
        if inst:IsA("ParticleEmitter") or inst:IsA("Trail") or inst:IsA("Beam") or inst:IsA("Sparkles") or inst:IsA("Fire") or inst:IsA("Smoke") then
            if shouldDelete(inst) or shouldDelete(inst.Texture) or shouldDelete(inst.Name) then
                nuke(inst)
                return
            end
        end
    end)
    if not ok then
        -- Fehler protokollieren, aber Script weiterlaufen lassen
        -- (auskommentieren, falls du keine Output willst)
        -- warn("[ANTI-SUIT] handle error:", tostring(err))
    end
end

-- Initial Scan (mit pcall)
for _, d in ipairs(Workspace:GetDescendants()) do
    pcall(handle, d)
end

-- Echtzeit Überwachung (mit pcall)
Workspace.DescendantAdded:Connect(function(d)
    pcall(handle, d)
end)

-- Character überwachen
local function cleanChar(char)
    if not char then return end
    for _, d in ipairs(char:GetDescendants()) do
        pcall(handle, d)
    end
    char.DescendantAdded:Connect(function(d) pcall(handle, d) end)
end

if player.Character then cleanChar(player.Character) end
player.CharacterAdded:Connect(cleanChar)

print("[ANTI-SUIT/AURA] Fixed version läuft.")
